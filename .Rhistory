knitr::opts_chunk$set(echo = TRUE)
# load packages
library(data.table)
library(foreign)
library(dplyr)
library(car)
library(Hmisc)
install.packages('Hmisc')
install.packages('scales')
install.packages('colorspace')
install.packages('scales')
install.packages('plyr')
install.packages('scales')
install.packages('Hmisc')
install.packages('viridis')
install.packages('lazyeval')
install.packages('viridis')
install.packages('Hmisc')
install.packages('base64enc')
install.packages('Hmisc')
# load packages
library(data.table)
library(foreign)
library(dplyr)
library(car)
library(Hmisc)
library(lmtest)
library(sandwich)
library(multiwayvcov)
library(stargazer)
d <- read.csv("craigslist.csv")
#d <- read.csv("craigslist.csv", stringsAsFactors = FALSE)
head(d)
dim(d)
colSums(is.na(d))
d <- read.csv("craigslist.csv")
#d <- read.csv("craigslist.csv", stringsAsFactors = FALSE)
head(d)
dim(d)
colSums(is.na(d))
d <- read.csv("craigslist.csv")
#d <- read.csv("craigslist.csv", stringsAsFactors = FALSE)
head(d)
dim(d)
colSums(is.na(d))
colnames(d)
colSums(is.na(d))
#create new subsetted dataframe
d_sub <- d[c(1:2, 8:9, 12:16)]
head(d_sub)
str(d_sub)
summary(d_sub$list_type)
# There are extra white spaces in 'katie_27', need to remove; returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
d_sub$katie_27 <- trim(d_sub$katie_27)
str(d_sub$katie_27)
#binarized 'list_type', 'katie_27', 'reply', and 'fave_reply'
d_sub <- within(d_sub, {
list_type = ifelse(list_type == "house", 1, 0)
katie_27 = ifelse(katie_27 == "katie_27", 1, 0)
reply = ifelse(reply == "Y", 1, 0)
fave_reply = ifelse(fave_reply == "Y", 1, 0)
})
#create new subsetted dataframe
d_sub <- d[c(1:2, 10:11, 14:18)]
head(d_sub)
str(d_sub)
summary(d_sub$list_type)
# There are extra white spaces in 'katie_27', need to remove; returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
d_sub$katie_27 <- trim(d_sub$katie_27)
str(d_sub$katie_27)
#binarized 'list_type', 'katie_27', 'reply', and 'fave_reply'
d_sub <- within(d_sub, {
list_type = ifelse(list_type == "house", 1, 0)
katie_27 = ifelse(katie_27 == "katie_27", 1, 0)
reply = ifelse(reply == "Y", 1, 0)
fave_reply = ifelse(fave_reply == "Y", 1, 0)
})
head(d_sub, 25)
#changed NA's in 'list_type' to 0
d_sub[c("list_type")][is.na(d_sub[c("list_type")])] <- 0
colSums(is.na(d_sub))
str(d_sub)
a <- d_sub[, c('list_price', 'list_type', 'katie_27',  'reply', 'fave_reply')]
b <- round(cor(a), 3)
b
library(corrplot)
install.packages('corrplot')
library(corrplot)
corrplot(b)
#Correlations
a <- d_sub[, c('list_price', 'list_type', 'katie_27',  'reply', 'fave_reply')]
a.cormat <- round(cor(a), 2)
melt.a <- melt(a.cormat)
install.packages('reshape2')
#Correlations
a <- d_sub[, c('list_price', 'list_type', 'katie_27',  'reply', 'fave_reply')]
a.cormat <- round(cor(a), 2)
melt.a <- melt(a.cormat)
#head(melt.speed)
ggplot(data=melt.a, aes(x=Var1, y=Var2, fill=value)) + geom_tile(color="white") +  scale_fill_gradient2(low = "orange", high = "dark green", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
mod.1 <- glm(reply ~ katie_27 + list_price + list_type, family = binomial(link = logit), data=d_sub)
summary(mod.1)
#model with interactions
mod.2 <- glm(reply ~ katie_27 + list_price + list_type + katie_27:list_price + katie_27: list_type, family = binomial(link = logit), data=d_sub)
summary(mod.2)
d$time_post_until_email <- difftime(sent_timestamp, post_timestamp, units=c("hours","mins"))
d$time_post_until_email <- difftime(d$sent_timestamp, d$post_timestamp, units=c("hours","mins"))
d$sent_timestamp <- as.POSIXct(d$sent_timestamp,format="%Y/%m/%dT%H:%M:%OS")
#d$time_post_until_email <- difftime(d$sent_timestamp, d$post_timestamp, units=c("hours","mins"))
dead(d)
head(d)
d <- read.csv("craigslist.csv")
#d <- read.csv("craigslist.csv", stringsAsFactors = FALSE)
d$sent_timestamp <- as.POSIXct(d$sent_timestamp,format="%Y-%m-%dT%H:%M:%OS")
#d$time_post_until_email <- difftime(d$sent_timestamp, d$post_timestamp, units=c("hours","mins"))
head(d)
d <- read.csv("craigslist.csv")
#d <- read.csv("craigslist.csv", stringsAsFactors = FALSE)
print(as.POSIXct(d$sent_timestamp,format="%Y/%m/%d %H:%M:%OS""))
#d$time_post_until_email <- difftime(d$sent_timestamp, d$post_timestamp, units=c("hours","mins"))
print(as.POSIXct(d$sent_timestamp,format="%Y/%m/%d %H:%M:%OS"))
#d$time_post_until_email <- difftime(d$sent_timestamp, d$post_timestamp, units=c("hours","mins"))
print(d$sent_timestamp)
print(as.POSIXct(d$sent_timestamp,format="%Y/%m/%d %H:%M:%OS"))
#d$time_post_until_email <- difftime(d$sent_timestamp, d$post_timestamp, units=c("hours","mins"))
print(d$sent_timestamp)
print(as.POSIXct(d$sent_timestamp,format="%Y/%m/%d %H:%M"))
#d$time_post_until_email <- difftime(d$sent_timestamp, d$post_timestamp, units=c("hours","mins"))
print(d$sent_timestamp)
print(as.POSIXct(d$sent_timestamp)
#d$time_post_until_email <- difftime(d$sent_timestamp, d$post_timestamp, units=c("hours","mins"))
print(d$sent_timestamp)
print(as.POSIXct(d$sent_timestamp))
print(d$sent_timestamp)
print(as.POSIXct(d$sent_timestamp,format="%Y/%m/%d %H:%M"))
#d$time_post_until_email <- difftime(d$sent_timestamp, d$post_timestamp, units=c("hours","mins"))
print(d$sent_timestamp)
print(as.POSIXct(d$sent_timestamp,format="%d/%m/%Y %H:%M"))
#d$time_post_until_email <- difftime(d$sent_timestamp, d$post_timestamp, units=c("hours","mins"))
print(d$sent_timestamp)
print(as.POSIXct(d$sent_timestamp,format="%m/%d/%Y %H:%M"))
#d$time_post_until_email <- difftime(d$sent_timestamp, d$post_timestamp, units=c("hours","mins"))
print(d$sent_timestamp)
print(as.POSIXct(d$sent_timestamp,format="%m/%d/%Y %H:%M", tz="EST"))
#d$time_post_until_email <- difftime(d$sent_timestamp, d$post_timestamp, units=c("hours","mins"))
d$sent_timestamp <- as.POSIXct(d$sent_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d$post_timestamp <- as.POSIXct(d$post_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d$reply_timestamp <- as.POSIXct(d$reply_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
head(d)
d$mins_post_to_email <- difftime(d$sent_timestamp - d$post_timestamp, units="hours")
d$mins_post_to_email <- difftime(d$sent_timestamp,d$post_timestamp, units="hours")
head(d)
d
d$mins_post_to_email <- difftime(d$sent_timestamp,d$post_timestamp, units="mins")
d$mins_email_to_reply <- difftime(d$reply_timestamp,d$sent_timestamp, units="mins")
d
d
d$mins_post_to_email <- int(difftime(d$sent_timestamp,d$post_timestamp, units="mins"))
d$mins_post_to_email <- as.int(difftime(d$sent_timestamp,d$post_timestamp, units="mins"))
#create new subsetted dataframe
d_sub <- d[c(1:2, 10:11, 14:18, 22:23)]
head(d_sub)
str(d_sub)
summary(d_sub$list_type)
# There are extra white spaces in 'katie_27', need to remove; returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
d_sub$katie_27 <- trim(d_sub$katie_27)
str(d_sub$katie_27)
#binarized 'list_type', 'katie_27', 'reply', and 'fave_reply'
d_sub <- within(d_sub, {
list_type = ifelse(list_type == "house", 1, 0)
katie_27 = ifelse(katie_27 == "katie_27", 1, 0)
reply = ifelse(reply == "Y", 1, 0)
fave_reply = ifelse(fave_reply == "Y", 1, 0)
})
head(d_sub, 25)
a <- d_sub[, c('list_price', 'list_type', 'katie_27',  'reply', 'fave_reply')]
b <- round(cor(a), 3)
b
a <- d_sub[, c('list_price', 'list_type', 'katie_27',  'reply', 'fave_reply', "mins_post_to_email")]
b <- round(cor(a), 3)
d$mins_post_to_email <- as.numeric(difftime(d$sent_timestamp,d$post_timestamp, units="mins"))
d$mins_email_to_reply <- as.numeric(difftime(d$reply_timestamp,d$sent_timestamp, units="mins"))
d
d$mins_post_to_email <- as.numeric(difftime(d$sent_timestamp,d$post_timestamp, units="mins"))
d$mins_email_to_reply <- difftime(d$reply_timestamp,d$sent_timestamp, units="mins")
d
d$sent_timestamp <- as.POSIXct(d$sent_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d$post_timestamp <- as.POSIXct(d$post_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d$reply_timestamp <- as.POSIXct(d$reply_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d <- read.csv("craigslist.csv")
#d <- read.csv("craigslist.csv", stringsAsFactors = FALSE)
d$sent_timestamp <- as.POSIXct(d$sent_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d$post_timestamp <- as.POSIXct(d$post_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d$reply_timestamp <- as.POSIXct(d$reply_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d$mins_post_to_email <- as.numeric(difftime(d$sent_timestamp,d$post_timestamp, units="mins"))
d$mins_email_to_reply <- difftime(d$reply_timestamp,d$sent_timestamp, units="mins")
d$mins_post_to_email <- as.numeric(difftime(d$sent_timestamp,d$post_timestamp, units="mins"))
d$mins_email_to_reply <- as.numeric(difftime(d$reply_timestamp,d$sent_timestamp, units="mins"))
d
#create new subsetted dataframe
d_sub <- d[c(1:2, 10:11, 14:18, 22:23)]
head(d_sub)
str(d_sub)
summary(d_sub$list_type)
# There are extra white spaces in 'katie_27', need to remove; returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
d_sub$katie_27 <- trim(d_sub$katie_27)
str(d_sub$katie_27)
#binarized 'list_type', 'katie_27', 'reply', and 'fave_reply'
d_sub <- within(d_sub, {
list_type = ifelse(list_type == "house", 1, 0)
katie_27 = ifelse(katie_27 == "katie_27", 1, 0)
reply = ifelse(reply == "Y", 1, 0)
fave_reply = ifelse(fave_reply == "Y", 1, 0)
})
head(d_sub, 25)
#changed NA's in 'list_type' to 0
d_sub[c("list_type")][is.na(d_sub[c("list_type")])] <- 0
colSums(is.na(d_sub))
str(d_sub)
a <- d_sub[, c('list_price', 'list_type', 'katie_27',  'reply', 'fave_reply', "mins_post_to_email")]
b <- round(cor(a), 3)
b
mod.1 <- glm(reply ~ katie_27 + list_price + list_type + mins_post_to_email, family = binomial(link = logit), data=d_sub)
summary(mod.1)
#model with interactions
mod.2 <- glm(reply ~ katie_27 + list_price + list_type + katie_27:list_price + katie_27:list_type + + mins_post_to_email, family = binomial(link = logit), data=d_sub)
summary(mod.2)
#model with interactions
mod.2 <- glm(reply ~ katie_27 + list_price + list_type + katie_27:list_price + katie_27:list_type , family = binomial(link = logit), data=d_sub)
summary(mod.2)
#model with interactions
mod.2 <- glm(reply ~ katie_27 + list_price + list_type + katie_27:list_price + katie_27:list_type + mins_post_to_email, family = binomial(link = logit), data=d_sub)
summary(mod.2)
#model with interactions
mod.2 <- glm(fave_reply ~ katie_27 + list_price + list_type + katie_27:list_price + katie_27:list_type + mins_post_to_email, family = binomial(link = logit), data=d_sub)
summary(mod.2)
mod.1 <- glm(fave_reply ~ katie_27 + list_price + list_type + mins_post_to_email, family = binomial(link = logit), data=d_sub)
summary(mod.1)
knitr::opts_chunk$set(echo = TRUE)
#df = read.csv("Data_Collection_Sheet.csv", fileEncoding="UTF-8-BOM")
d <- read.csv("craigslist.csv")
d$email_sent_date = NULL
d$email_sent_time = NULL
d$post_date = NULL
d$post_time = NULL
d$reply_date = NULL
d$reply_time = NULL
colnames(d)[3:4]
colnames(d)[c(2,5)]
colnames(d)[6:9]
colnames(d)[10]
colnames(d)[1]
colnames(d)[11:13]
d$sent_timestamp <- as.POSIXct(d$sent_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d
#df = read.csv("Data_Collection_Sheet.csv", fileEncoding="UTF-8-BOM")
d <- read.csv("craigslist.csv")
d$email_sent_date = NULL
d$email_sent_time = NULL
d$post_date = NULL
d$post_time = NULL
d$reply_date = NULL
d$reply_time = NULL
colnames(d)[1]
d$sent_timestamp <- as.POSIXct(d$sent_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d$post_timestamp <- as.POSIXct(d$post_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d$reply_timestamp <- as.POSIXct(d$reply_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d$poster_age = as.numeric(d$poster_age)
d$hours_post_to_email <- as.numeric(difftime(d$sent_timestamp,d$post_timestamp, units="hours"))
d$hours_email_to_reply <- as.numeric(difftime(d$reply_timestamp,d$sent_timestamp, units="hours"))
# head(d) # don't include this - at least not for the columns of text
str(d)
dim(d)
colSums(is.na(d))
colnames(d)
hist(d$list_price) # maybe worth log transforming this
hist(log(d$list_price))
# create temporary dataframe casting categorical vars as 0-1 to allow corrplot
# d_temp <- within(d_sub, {
#   list_type = ifelse(list_type == "house", 1, 0)
#   treatment = ifelse(treatment == "katie_27", 1, 0)
#   #reply = ifelse(reply == "Y", 1, 0)
#   fave_reply = ifelse(fave_reply == "Y", 1, 0)
# })
# correlations = cor(na.omit(d_temp[, c('list_price', 'list_type', 'treatment', 'fave_reply', "mins_post_to_email")]))
# corrplot(correlations, method="color", type="upper", addCoef.col = "black",
#          col=colorRampPalette(c("#BB4444",  "#FFFFFF", "#4477AA"))(200))
# fit logistic regression without covariates
model.1 = glm(fave_reply ~ treatment, data=d, family = binomial(link="logit"))
#df = read.csv("Data_Collection_Sheet.csv", fileEncoding="UTF-8-BOM")
d <- read.csv("craigslist.csv")
d$email_sent_date = NULL
d$email_sent_time = NULL
d$post_date = NULL
d$post_time = NULL
d$reply_date = NULL
d$reply_time = NULL
d$sent_timestamp <- as.POSIXct(d$sent_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d$post_timestamp <- as.POSIXct(d$post_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d$reply_timestamp <- as.POSIXct(d$reply_timestamp,format="%m/%d/%Y %H:%M", tz="EST")
d$poster_age = as.numeric(d$poster_age)
d$hours_post_to_email <- as.numeric(difftime(d$sent_timestamp,d$post_timestamp, units="hours"))
d$hours_email_to_reply <- as.numeric(difftime(d$reply_timestamp,d$sent_timestamp, units="hours"))
# fit logistic regression without covariates
model.1 = glm(fave_reply ~ treatment, data=d, family = binomial(link="logit"))
#summary(model.1)
# fit logistic regression with select covariates
model.2 = glm(fave_reply ~ treatment + hours_post_to_email, data=d, family = binomial(link="logit"))
#summary(model.2)
# fit logistic regression without covariates
model.1 = glm(fave_reply ~ treatment, data=d, family = binomial(link="logit"))
summary(model.1)
# fit logistic regression with select covariates
model.2 = glm(fave_reply ~ treatment + hours_post_to_email, data=d, family = binomial(link="logit"))
summary(model.2)
d_dt <- data.table((d))
reply_treatment <- d_dt[treatment=="katie_43", mean(fave_reply)]
view_no_success <- d_dt[treatment=="katie_27", mean(fave_reply)]
ate = view_success - view_no_success
d_dt <- data.table((d))
reply_treatment <- d_dt[treatment=="katie_43", mean(fave_reply)]
reply_base <- d_dt[treatment=="katie_27", mean(fave_reply)]
ate = reply_treatment - reply_base
print(ate)
d_dt <- data.table((d))
reply_treatment <- d_dt[treatment=="katie_43", mean(fave_reply)]
reply_base <- d_dt[treatment=="katie_27", mean(fave_reply)]
ate = reply_treatment - reply_base
print(ate)
d_dt <- data.table((d))
reply_treatment <- d_dt[treatment=="katie_43", mean(fave_reply)]
reply_base <- d_dt[treatment=="katie_27", mean(fave_reply)]
ate <- reply_treatment - reply_base
print(ate)
d_dt <- data.table((d))
reply_treatment <- d_dt[treatment=="katie_43", mean(fave_reply)]
reply_base <- d_dt[treatment=="katie_27", mean(fave_reply)]
#ate <- reply_treatment - reply_base
#print(ate)
d_dt <- data.table((d))
reply_treatment <- d_dt[treatment="katie_43", mean(fave_reply)]
d_dt <- data.table((d))
reply_treatment <- d_dt[treatment=="katie_43", mean(fave_reply)]
reply_base <- d_dt[treatment=="katie_27", mean(fave_reply)]
#ate <- reply_treatment - reply_base
#print(ate)
# fit logistic regression without covariates
model.1 = glm(fave_reply ~ treatment, data=d, family = binomial(link="logit"))
summary(model.1)
# fit logistic regression with select covariates
model.2 = glm(fave_reply ~ treatment + hours_post_to_email, data=d, family = binomial(link="logit"))
summary(model.2)
d
d
unique(d$treatment)
d_dt <- data.table(d)
reply_treatment <- d_dt[treatment=="katie_43", mean(fave_reply)]
reply_base <- d_dt[treatment=="katie_27", mean(fave_reply)]
#ate <- reply_treatment - reply_base
#print(ate)
d_dt <- data.table(d)
d_dt[treatment=="katie_43",]
#reply_treatment <- d_dt[treatment=="katie_43", mean(fave_reply)]
#reply_base <- d_dt[treatment=="katie_27", mean(fave_reply)]
#ate <- reply_treatment - reply_base
#print(ate)
d_dt <- data.table(d)
d_dt[treatment=="katie_43",mean(fave_reply),]
#reply_treatment <- d_dt[treatment=="katie_43", mean(fave_reply)]
#reply_base <- d_dt[treatment=="katie_27", mean(fave_reply)]
#ate <- reply_treatment - reply_base
#print(ate)
d_dt <- data.table(d)
d_dt[treatment=="katie_43", mean(fave_reply=="Y")]
#reply_treatment <- d_dt[treatment=="katie_43", mean(fave_reply)]
#reply_base <- d_dt[treatment=="katie_27", mean(fave_reply)]
#ate <- reply_treatment - reply_base
#print(ate)
d_dt <- data.table(d)
reply_treatment <- d_dt[treatment=="katie_43", mean(fave_reply=="Y")]
reply_base <- d_dt[treatment=="katie_27", mean(fave_reply=="Y")]
ate <- reply_treatment - reply_base
print(ate)
iter <- 10000
ate_vec <- rep(NA, length(iter))
for(i in 1:iter){
d[, success_rand := sample(c(0,1), size = .N, replace=TRUE)]
ate_vec[i] <- as.numeric(d_dt[ , .('success_mean' = mean(treatment)), keyby =.(success_rand)][ , .('ate' = diff(success_mean, lag=1, differences=1))])
}
iter <- 10000
ate_vec <- rep(NA, length(iter))
for(i in 1:iter){
d_dt[, success_rand := sample(c(0,1), size = .N, replace=TRUE)]
ate_vec[i] <- as.numeric(d_dt[ , .('success_mean' = mean(treatment)), keyby =.(success_rand)][ , .('ate' = diff(success_mean, lag=1, differences=1))])
}
iter <- 10000
ate_vec <- rep(NA, length(iter))
for(i in 1:iter){
d_dt[, success_rand := sample(c(0,1), size = .N, replace=TRUE)]
ate_vec[i] <- as.numeric(d_dt[ , .('success_mean' = mean(fave_reply=="Y")), keyby =.(success_rand)][ , .('ate' = diff(success_mean, lag=1, differences=1))])
}
table(ate_vec>ate)
table(ate_vec<ate)
